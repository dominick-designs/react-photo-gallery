{"version":3,"sources":["components/Nav.js","components/Search.js","components/config.js","components/Photo.js","components/NotFound.js","components/PhotoList.js","App.js","components/About.js","serviceWorker.js","index.js"],"names":["Nav","className","exact","to","onClick","props","Component","Search","state","searchText","onSearchChange","e","persist","setState","prevState","target","value","handleSubmit","preventDefault","onSearch","currentTarget","reset","onSubmit","this","type","name","placeholder","required","onChange","fill","height","viewBox","width","xmlns","d","apiKey","Photo","src","url","alt","NotFound","PhotoList","photos","results","length","map","photo","farm","server","id","secret","key","query","App","performSearch","fetch","then","response","json","responseData","loading","catch","error","console","log","basename","path","render","component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6c2b994d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { NavLink } from 'react-router-dom';\n\nexport default class Nav extends Component {\n    //render navigation links using onClick even handler and the props. pass props argument. the props are seen on App.js. in this case the prop is a function that takes an argument. pass 'rainbows' as argument to display images of rainbows\n    render() {\n        return (\n            <nav className=\"main-nav\">\n                <ul>\n                    <li><NavLink exact to='/rainbows' onClick={() => this.props.onClick('rainbows')}>Rainbows</NavLink></li>\n                    <li><NavLink exact to='/mountains' onClick={() => this.props.onClick('himalayas')}>Mountains</NavLink></li>\n                    <li><NavLink exact to='/beaches' onClick={() => this.props.onClick('beaches')}>Beaches</NavLink></li>\n                </ul>\n            </nav >\n        )\n    }\n\n}\n\n","import React, { Component } from 'react';\n\nexport default class Search extends Component {\n    // set state to empty string\n    state = {\n        searchText: ''\n    }\n    //function called on input to get the value of input field\n    onSearchChange = e => {\n        e.persist();\n        this.setState(prevState => ({\n            searchText: e.target.value\n        }));\n    }\n    // in this function props is the performsearch function seen in App.js which takes argument for the query string; the argument is taken from the value of the input field\n    handleSubmit = e => {\n        e.preventDefault();\n        this.props.onSearch(this.state.searchText);\n        e.currentTarget.reset();\n    }\n    render() {\n        return (\n            <form className=\"search-form\" onSubmit={this.handleSubmit}>\n                <input type=\"search\" name=\"search\" placeholder=\"Search\" required onChange={this.onSearchChange} />\n                <button type=\"submit\" className=\"search-button\">\n                    <svg fill=\"#fff\" height=\"24\" viewBox=\"0 0 23 23\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path d=\"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z\" />\n                        <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n                    </svg>\n                </button>\n            </form>\n        )\n    }\n}\n\n","// the flickr api. this is not pushed to github\nconst apiKey = '5f8d88c222c8d95002a650c1db3c338b';\nexport default apiKey;","import React from 'react';\n\n// img src is passed props from photolist.js\nconst Photo = props => (\n    <div className=\"photo-container\">\n        <ul>\n            <li>\n                <img src={props.url} alt=\"\" />\n            </li>\n        </ul>\n    </div>\n);\n\nexport default Photo;","import React from 'react';\n\n// simple not found component \nconst NotFound = () => {\n    return (\n        <header className=\"not-found\">\n            <h3>No Results Found</h3>\n            <p>You search did not return any results. Please try again.</p>\n        </header>\n    )\n}\n\nexport default NotFound;","import React from 'react';\nimport Photo from './Photo';\nimport NotFound from './NotFound';\n\n// props are passed from App.js and in this case prop is the performsearch function in App.js\n// interpolation is used to create image url\nconst PhotoList = props => {\n    const results = props.photos;\n    let photos;\n    if (results.length > 0) {\n        photos = results.map(photo =>\n            <Photo url={`https://farm${photo.farm}.staticflickr.com/${photo.server}/${photo.id}_${photo.secret}.jpg`} key={photo.id} />\n        );\n    } else {\n        photos = <NotFound />;\n    }\n\n    // photos variable above is rendered below\n    return (\n        <div className=\"photo-container\">\n            <h2>Photos of {props.query}</h2>\n            <ul>\n                {photos}\n            </ul>\n        </div>\n    );\n}\nexport default PhotoList;","import React, { Component } from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport './App.css';\n\n// import components\nimport Nav from './components/Nav';\nimport Search from './components/Search';\nimport apiKey from './components/config';\nimport PhotoList from './components/PhotoList';\nimport NotFound from './components/NotFound';\nimport About from './components/About';\n\nexport default class App extends Component {\n  // super constructor to store state\n  constructor() {\n    super();\n    this.state = {\n      photos: [],\n      query: '',\n      loading: true\n    };\n  }\n  // on component mount run this function *named UNSAFE according to error on console\n  UNSAFE_componentWillMount() {\n    this.performSearch();\n  }\n  // perform the root API call and store response in state constructor above\n  performSearch = (query = 'big island') => {\n    fetch(`https://www.flickr.com/services/rest/?method=flickr.photos.search&api_key=${apiKey}&tags=${query}&safe_search=&per_page=24&format=json&nojsoncallback=1`)\n      .then(response => response.json())\n      .then(responseData => {\n        this.setState({\n          photos: responseData.photos.photo,\n          query: query,\n          loading: false\n        });\n      })\n      .catch(error => {\n        console.log('There was an error fetching and parsing data', error);\n      });\n  }\n  //react must have a render method; inside render is the return method\n  render() {\n    return (\n      <BrowserRouter basename=\"/react-photo-gallery\">\n        <div className=\"container\">\n          <Search onSearch={this.performSearch} />\n          <Nav onClick={this.performSearch} />\n\n          <Switch> {/* use switch to ensure \"not found\" route is not shown on every page*/}\n            <Route path=\"/\" render={() => (this.state.loading)\n              ? <h3>LOADING...</h3>\n              : <PhotoList photos={this.state.photos} query={this.state.query} />} />  {/*use this ternary operator to show the loading notification */}\n            <Route path=\"/rainbows\" component={NotFound} />\n            <Route path=\"/mountains\" />\n            <Route path=\"/beaches\" />\n            {/* <Route path=\"/about\" component={About} /> */}\n            <Route component={NotFound} />\n          </Switch>\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n","import React, { Component } from 'react';\nexport default class App extends Component {\n\n    render() {\n        return (\n            <React.Fragment>\n                <h2>You found the about page!</h2>\n                <p>In case you were wondering what this is all about....It's about coding a React gallery app using Flickr API</p>\n            </React.Fragment>\n        )\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}